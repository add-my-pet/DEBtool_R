ylim=c(min(N10[,2],N15[,2]),max(N10[,2],N15[,2]))
N=as.matrix(((10*xlim[1]):(10*xlim[2]))/10) # prey density values for the simulated curves
plot(N,funcresp2(p10,N), ylim = N_ylim, col="red")
points(N10[,1],N10[,2], pch = 3, col = "red")
lines(N,funcresp2(p15,N), col = "blue")
points(N15[,1],N15[,2], pch = 3, col = "blue")
v
Y
fv
max(max(abs(v[,two2np1] - v[,onesn])))
tol_simplex
max(abs(fv[1] - fv[two2np1]))
tol_fun
xbar = rowSums(v[,one2n])/ n_par
xr = (1 + rho) * xbar - rho * v[,np1]
q[index,1] = xr
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
xr
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fxr = t(W) %*% ((listf[[1]] - Y) ^ 2)
} else { fxr = t(W) %*% ((unlist(listf) - Y) ^ 2) }
fxr
fv[,1]
(fxr < fv[,1])
xe = (1 + rho * chi) * xbar - rho * chi * v[, np1]
q[index,1] = xe
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fxe = t(W) %*% ((listf[[1]] - Y) ^ 2)
} else {fxe = t(W) %*% ((unlist(listf) - Y) ^2)}
func_evals = func_evals + 1
if (fxe < fxr){
v[,np1] = xe
fv[,np1] = fxe
how = 'expand'
}
(fxe < fxr)
fv[,1] <= fxr
fxr < fv[,n_par]
if (fxr < fv[,1]){
# Calculate the expansion point ----
xe = (1 + rho * chi) * xbar - rho * chi * v[, np1]
q[index,1] = xe
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fxe = t(W) %*% ((listf[[1]] - Y) ^ 2)
} else {fxe = t(W) %*% ((unlist(listf) - Y) ^2)}
func_evals = func_evals + 1
if (fxe < fxr){
v[,np1] = xe
fv[,np1] = fxe
how = 'expand'
} else {
v[,np1] = xr
fv[,np1] = fxr
how = 'reflect'
}
} else {# fv[,1] <= fxr
if (fxr < fv[,n_par]){
v[,np1] = xr
fv[,np1] = fxr
how = 'reflect'
} else{
# fxr >= fv(:,n_par)
# Perform contraction
if (fxr < fv[,np1]){
# Perform an outside contraction
xc = (1 + psi * rho) * xbar - psi * rho * v[,np1]
q[index,1] = xc
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fxc = t(W) %*% ((listf[[1]] - Y) ^ 2)
} else{fxc = t(W) %*% ((unlist(listf) - Y) ^ 2)}
func_evals = func_evals + 1
if (fxc <= fxr){
v[,np1] = xc
fv[,np1] = fxc
how = 'contract outside'
} else { how = 'shrink' } # perform a shrink
} else {
# Perform an inside contraction
xcc = (1 - psi) * xbar + psi * v[,np1]
q[index,1] = xcc
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fxcc = t(W) %*% ((listf[[1]] - Y) ^ 2)
}  else{fxcc = t(W) %*% ((unlist(listf) - Y) ^ 2)}
func_evals = func_evals + 1
if (fxcc < fv[,np1]){
v[,np1] = xcc
fv[,np1] = fxcc
how = 'contract inside'
} else {
# perform a shrink
how = 'shrink'
}
}
if ( how == 'shrink' ){
for (j in two2np1){
v[,j] = v[,1] + sigma * (v[,j] - v[,1])
q[index,1] = v[,j]
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fv[,j] = t(W) %*% ((listf[[1]] - Y) ^ 2)
} else {fv[,j] = t(W) %*% ((unlist(listf) - Y)^2)}
}
func_evals = func_evals + n_par
}
}
}
j=order(fv)
fv=matrix(fv[1,j], nrow=1, byrow=T)
v = v[,j]
itercount = itercount + 1
if (report == 1){
print(paste('step ', itercount, ' ssq ', min(fv), '-', max(fv), ' ', how, '\n'))
}
v
(func_evals < max_fun_evals && itercount < max_step_number)
( max(max(abs(v[,two2np1] - v[,onesn]))) <= tol_simplex && max(abs(fv[1] - fv[two2np1])) <= tol_fun )
how = ''
# Compute the reflection point ----
# xbar = average of the n (NOT n+1) best points
xbar = rowSums(v[,one2n])/ n_par
xr = (1 + rho) * xbar - rho * v[,np1]
q[index,1] = xr
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fxr = t(W) %*% ((listf[[1]] - Y) ^ 2)
} else { fxr = t(W) %*% ((unlist(listf) - Y) ^ 2) }
func_evals = func_evals + 1
if (fxr < fv[,1]){
# Calculate the expansion point ----
xe = (1 + rho * chi) * xbar - rho * chi * v[, np1]
q[index,1] = xe
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fxe = t(W) %*% ((listf[[1]] - Y) ^ 2)
} else {fxe = t(W) %*% ((unlist(listf) - Y) ^2)}
func_evals = func_evals + 1
if (fxe < fxr){
v[,np1] = xe
fv[,np1] = fxe
how = 'expand'
} else {
v[,np1] = xr
fv[,np1] = fxr
how = 'reflect'
}
} else {# fv[,1] <= fxr
if (fxr < fv[,n_par]){
v[,np1] = xr
fv[,np1] = fxr
how = 'reflect'
} else{
# fxr >= fv(:,n_par)
# Perform contraction
if (fxr < fv[,np1]){
# Perform an outside contraction
xc = (1 + psi * rho) * xbar - psi * rho * v[,np1]
q[index,1] = xc
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fxc = t(W) %*% ((listf[[1]] - Y) ^ 2)
} else{fxc = t(W) %*% ((unlist(listf) - Y) ^ 2)}
func_evals = func_evals + 1
if (fxc <= fxr){
v[,np1] = xc
fv[,np1] = fxc
how = 'contract outside'
} else { how = 'shrink' } # perform a shrink
} else {
# Perform an inside contraction
xcc = (1 - psi) * xbar + psi * v[,np1]
q[index,1] = xcc
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fxcc = t(W) %*% ((listf[[1]] - Y) ^ 2)
}  else{fxcc = t(W) %*% ((unlist(listf) - Y) ^ 2)}
func_evals = func_evals + 1
if (fxcc < fv[,np1]){
v[,np1] = xcc
fv[,np1] = fxcc
how = 'contract inside'
} else {
# perform a shrink
how = 'shrink'
}
}
if ( how == 'shrink' ){
for (j in two2np1){
v[,j] = v[,1] + sigma * (v[,j] - v[,1])
q[index,1] = v[,j]
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fv[,j] = t(W) %*% ((listf[[1]] - Y) ^ 2)
} else {fv[,j] = t(W) %*% ((unlist(listf) - Y)^2)}
}
func_evals = func_evals + n_par
}
}
}
j=order(fv)
fv=matrix(fv[1,j], nrow=1, byrow=T)
v = v[,j]
itercount = itercount + 1
if (report == 1){
print(paste('step ', itercount, ' ssq ', min(fv), '-', max(fv), ' ', how, '\n'))
}
v
p15<-c(0.115,3.7)
xlim=c(min(N10[,1],N15[,1]),max(N10[,1],N15[,1]))
ylim=c(min(N10[,2],N15[,2]),max(N10[,2],N15[,2]))
N=as.matrix(((10*xlim[1]):(10*xlim[2]))/10) # prey density values for the simulated curves
plot(N,funcresp2(p10,N), ylim = N_ylim, col="red")
points(N10[,1],N10[,2], pch = 3, col = "red")
lines(N,funcresp2(p15,N), col = "blue")
points(N15[,1],N15[,2], pch = 3, col = "blue")
how = ''
# Compute the reflection point ----
# xbar = average of the n (NOT n+1) best points
xbar = rowSums(v[,one2n])/ n_par
xr = (1 + rho) * xbar - rho * v[,np1]
q[index,1] = xr
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fxr = t(W) %*% ((listf[[1]] - Y) ^ 2)
} else { fxr = t(W) %*% ((unlist(listf) - Y) ^ 2) }
func_evals = func_evals + 1
if (fxr < fv[,1]){
# Calculate the expansion point ----
xe = (1 + rho * chi) * xbar - rho * chi * v[, np1]
q[index,1] = xe
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fxe = t(W) %*% ((listf[[1]] - Y) ^ 2)
} else {fxe = t(W) %*% ((unlist(listf) - Y) ^2)}
func_evals = func_evals + 1
if (fxe < fxr){
v[,np1] = xe
fv[,np1] = fxe
how = 'expand'
} else {
v[,np1] = xr
fv[,np1] = fxr
how = 'reflect'
}
} else {# fv[,1] <= fxr
if (fxr < fv[,n_par]){
v[,np1] = xr
fv[,np1] = fxr
how = 'reflect'
} else{
# fxr >= fv(:,n_par)
# Perform contraction
if (fxr < fv[,np1]){
# Perform an outside contraction
xc = (1 + psi * rho) * xbar - psi * rho * v[,np1]
q[index,1] = xc
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fxc = t(W) %*% ((listf[[1]] - Y) ^ 2)
} else{fxc = t(W) %*% ((unlist(listf) - Y) ^ 2)}
func_evals = func_evals + 1
if (fxc <= fxr){
v[,np1] = xc
fv[,np1] = fxc
how = 'contract outside'
} else { how = 'shrink' } # perform a shrink
} else {
# Perform an inside contraction
xcc = (1 - psi) * xbar + psi * v[,np1]
q[index,1] = xcc
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fxcc = t(W) %*% ((listf[[1]] - Y) ^ 2)
}  else{fxcc = t(W) %*% ((unlist(listf) - Y) ^ 2)}
func_evals = func_evals + 1
if (fxcc < fv[,np1]){
v[,np1] = xcc
fv[,np1] = fxcc
how = 'contract inside'
} else {
# perform a shrink
how = 'shrink'
}
}
if ( how == 'shrink' ){
for (j in two2np1){
v[,j] = v[,1] + sigma * (v[,j] - v[,1])
q[index,1] = v[,j]
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fv[,j] = t(W) %*% ((listf[[1]] - Y) ^ 2)
} else {fv[,j] = t(W) %*% ((unlist(listf) - Y)^2)}
}
func_evals = func_evals + n_par
}
}
}
j=order(fv)
fv=matrix(fv[1,j], nrow=1, byrow=T)
v = v[,j]
itercount = itercount + 1
if (report == 1){
print(paste('step ', itercount, ' ssq ', min(fv), '-', max(fv), ' ', how, '\n'))
}
v
p15<-c(0.12,3.25)
xlim=c(min(N10[,1],N15[,1]),max(N10[,1],N15[,1]))
ylim=c(min(N10[,2],N15[,2]),max(N10[,2],N15[,2]))
N=as.matrix(((10*xlim[1]):(10*xlim[2]))/10) # prey density values for the simulated curves
plot(N,funcresp2(p10,N), ylim = N_ylim, col="red")
points(N10[,1],N10[,2], pch = 3, col = "red")
lines(N,funcresp2(p15,N), col = "blue")
points(N15[,1],N15[,2], pch = 3, col = "blue")
how = ''
# Compute the reflection point ----
# xbar = average of the n (NOT n+1) best points
xbar = rowSums(v[,one2n])/ n_par
xr = (1 + rho) * xbar - rho * v[,np1]
q[index,1] = xr
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fxr = t(W) %*% ((listf[[1]] - Y) ^ 2)
} else { fxr = t(W) %*% ((unlist(listf) - Y) ^ 2) }
func_evals = func_evals + 1
if (fxr < fv[,1]){
# Calculate the expansion point ----
xe = (1 + rho * chi) * xbar - rho * chi * v[, np1]
q[index,1] = xe
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fxe = t(W) %*% ((listf[[1]] - Y) ^ 2)
} else {fxe = t(W) %*% ((unlist(listf) - Y) ^2)}
func_evals = func_evals + 1
if (fxe < fxr){
v[,np1] = xe
fv[,np1] = fxe
how = 'expand'
} else {
v[,np1] = xr
fv[,np1] = fxr
how = 'reflect'
}
} else {# fv[,1] <= fxr
if (fxr < fv[,n_par]){
v[,np1] = xr
fv[,np1] = fxr
how = 'reflect'
} else{
# fxr >= fv(:,n_par)
# Perform contraction
if (fxr < fv[,np1]){
# Perform an outside contraction
xc = (1 + psi * rho) * xbar - psi * rho * v[,np1]
q[index,1] = xc
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fxc = t(W) %*% ((listf[[1]] - Y) ^ 2)
} else{fxc = t(W) %*% ((unlist(listf) - Y) ^ 2)}
func_evals = func_evals + 1
if (fxc <= fxr){
v[,np1] = xc
fv[,np1] = fxc
how = 'contract outside'
} else { how = 'shrink' } # perform a shrink
} else {
# Perform an inside contraction
xcc = (1 - psi) * xbar + psi * v[,np1]
q[index,1] = xcc
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fxcc = t(W) %*% ((listf[[1]] - Y) ^ 2)
}  else{fxcc = t(W) %*% ((unlist(listf) - Y) ^ 2)}
func_evals = func_evals + 1
if (fxcc < fv[,np1]){
v[,np1] = xcc
fv[,np1] = fxcc
how = 'contract inside'
} else {
# perform a shrink
how = 'shrink'
}
}
if ( how == 'shrink' ){
for (j in two2np1){
v[,j] = v[,1] + sigma * (v[,j] - v[,1])
q[index,1] = v[,j]
eval(parse(text=paste('listf = func(q[,1],', listxyw, ')')))
if (nxyw == 1){
if(!inherits(varargin, "list")){listf <- list(listf)}
fv[,j] = t(W) %*% ((listf[[1]] - Y) ^ 2)
} else {fv[,j] = t(W) %*% ((unlist(listf) - Y)^2)}
}
func_evals = func_evals + n_par
}
}
}
j=order(fv)
fv=matrix(fv[1,j], nrow=1, byrow=T)
v = v[,j]
itercount = itercount + 1
if (report == 1){
print(paste('step ', itercount, ' ssq ', min(fv), '-', max(fv), ' ', how, '\n'))
}
v
nmregr_options(key='default')
p10 = nmregr(funcresp2, c(0.2, 1), N10)[[1]]; # estimate parameters
p10
p15 = nmregr(funcresp2, c(0.1, 4), N15)[[1]]; # estimate parameters
p15
nmregr_options(report=0)
nmregr_options('report',0)
p10 = nmregr(funcresp2, c(0.2, 1), N10)[[1]]; # estimate parameters
key="a"
(key=='report')
(key!='inexistent')
cat('key ', key, ' is unkown')
(numel(report) != 0)
nmregr_options()
nmregr_options()
names.files=list.files(getwd(), recursive = TRUE, pattern = ".R$")
patterns<-paste("(^|/)", c("mydata", "mer.R","nmregr_options.R",
"mydata 2.R" , "verifs.R", "verifs 2.R", "deSolve example.R"), sep="")
names.source=names.files[-unique(unlist(lapply(patterns, grep, names.files, perl = TRUE)))]
mute <- lapply(names.source, source)
nmregr_options()
names.files=list.files(getwd(), recursive = TRUE, pattern = ".R$")
patterns<-paste("(^|/)", c("mydata", "mer.R","nmregr_options.R",
"mydata 2.R" , "verifs.R", "verifs 2.R", "deSolve example.R"), sep="")
names.source=names.files[-unique(unlist(lapply(patterns, grep, names.files, perl = TRUE)))]
mute <- lapply(names.source, source)
nmregr_options()
names.files=list.files(getwd(), recursive = TRUE, pattern = ".R$")
patterns<-paste("(^|/)", c("mydata", "mer.R",
"mydata 2.R" , "verifs.R", "verifs 2.R", "deSolve example.R"), sep="")
names.source=names.files[-unique(unlist(lapply(patterns, grep, names.files, perl = TRUE)))]
mute <- lapply(names.source, source)
names.files=list.files(getwd(), recursive = TRUE, pattern = ".R$")
patterns<-paste("(^|/)", c("mydata", "mer.R",
"mydata 2.R" , "verifs.R", "verifs 2.R", "deSolve example.R"), sep="")
names.source=names.files[-unique(unlist(lapply(patterns, grep, names.files, perl = TRUE)))]
mute <- lapply(names.source, source)
nmregr_options()
install.packages("deBInfer")
0.9^10
0.9*0.9
(80-230)/50
(250-230)/50
pnorm(-3)
(52*2+9+30)*2/3
((52*2+9)*2/3)+30
mean(c(227,245,223,259,251,276,286))
p<-13/31
ic<-1.96*50/sqrt(7)
230-ic
230+ic
31-13
qnorm(1-0.025)
qnorm(1-0.01)
pnorm(-3)
31*0.58
1-pnorm(250,230,50)
icp<-1.96*sqrt((13/31)*(1-13/31)/31)
(13/31)-icp
(13/31)+icp
prop.test(13,31)
prop.test(13,31, conf.level=0.98)
icp<-2.3*sqrt((13/31)*(1-13/31)/31)
(13/31)+icp
(13/31)-icp
qnorm(0.99)
143*2/3
1767/7
library(readxl)
data <- read_excel("~/Enseignement/2017 UPPA/pair_S4_TraitementStat1/CC2/2018/JEMBE 50994_Data CC2.xlsx")
View(data)
mean(A.punctatus.20m2)
mean(data$A.punctatus.20m2)
179/160
179/163
sum(data$A.punctatus.20m2)
min(data$A.punctatus.20m2)
max(data$A.punctatus.20m2)
max(data$L.trabeculata.2m2)
min(data$L.trabeculata.2m2)
mean(data$L.trabeculata.2m2)
sum(data$L.trabeculata.2m2)
table(data$A.punctatus.20m2>0,data$Site)
exp(10)
log(7200)
